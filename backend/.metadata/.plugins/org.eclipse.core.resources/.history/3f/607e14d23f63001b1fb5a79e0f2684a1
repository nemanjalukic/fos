package com.nl.fos.service.impl;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.nl.fos.enums.OrderStatusEnum;
import com.nl.fos.enums.ResultEnum;
import com.nl.fos.exception.MyException;
import com.nl.fos.model.Order;
import com.nl.fos.model.OrderItem;
import com.nl.fos.repository.FoodItemRepository;
import com.nl.fos.repository.OrderItemRepository;
import com.nl.fos.repository.OrderRepository;
import com.nl.fos.repository.UserRepository;
import com.nl.fos.service.FoodItemService;
import com.nl.fos.service.OrderService;

/**
 * Created By Zhu Lin on 3/14/2018.
 */
@Service
public class OrderServiceImpl implements OrderService {
    @Autowired
    OrderRepository orderRepository;
    @Autowired
    UserRepository userRepository;
    @Autowired
    FoodItemRepository foodItemRepository;
    @Autowired
    FoodItemService productService;
    @Autowired
    OrderItemRepository orderItemRepository;

    @Override
    public Page<Order> findAll(Pageable pageable) {
        return orderRepository.findAllByOrderByOrderStatusAscCreateTimeDesc(pageable);
    }

    @Override
    public Page<Order> findByStatus(Integer status, Pageable pageable) {
        return orderRepository.findAllByOrderStatusOrderByCreateTimeDesc(status, pageable);
    }

    @Override
    public Page<Order> findByBuyerEmail(String email, Pageable pageable) {
        return orderRepository.findAllByBuyerEmailOrderByOrderStatusAscCreateTimeDesc(email, pageable);
    }

    @Override
    public Page<Order> findByBuyerPhone(String phone, Pageable pageable) {
        return orderRepository.findAllByBuyerEmailOrderByOrderStatusAscCreateTimeDesc(phone, pageable);
    }

    @Override
    public Order findOne(Long orderId) {
        Order order = orderRepository.findByOrderId(orderId);
        if(order == null) {
            throw new MyException(ResultEnum.ORDER_NOT_FOUND);
        }
        return order;
    }

    @Override
    @Transactional
    public Order finish(Long orderId) {
        Order order = findOne(orderId);
        if(!order.getOrderStatus().equals(OrderStatusEnum.NEW.getCode())) {
            throw new MyException(ResultEnum.ORDER_STATUS_ERROR);
        }

        order.setOrderStatus(OrderStatusEnum.FINISHED.getCode());
        orderRepository.save(order);
        return orderRepository.findByOrderId(orderId);
    }

    @Override
    @Transactional
    public Order cancel(Long orderId) {
        Order order = findOne(orderId);
        if(!order.getOrderStatus().equals(OrderStatusEnum.NEW.getCode())) {
            throw new MyException(ResultEnum.ORDER_STATUS_ERROR);
        }

        order.setOrderStatus(OrderStatusEnum.CANCELED.getCode());
        orderRepository.save(order);

        // Restore Stock
        Iterable<OrderItem> products = order.getProducts();
        for(OrderItem orderItem : products) {
            FoodItem productInfo = foodItemRepository.findByProductId(orderItem.getProductId());
            if(productInfo != null) {
                productService.increaseStock(orderItem.getProductId(), orderItem.getCount());
            }
        }
        return orderRepository.findByOrderId(orderId);

    }
}
