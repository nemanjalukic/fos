package com.nl.fos.controllers;
import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;

import com.nl.fos.model.FoodItem;
import com.nl.fos.service.FoodItemService;
@CrossOrigin()
@RestController

public class FoodItemController  {
	
    @Autowired
    FoodItemService foodItemService;

    @GetMapping("/fooditem")
    public Page<FoodItem> findAll(@RequestParam(value = "page", defaultValue = "1") Integer page,
                                     @RequestParam(value = "size", defaultValue = "3") Integer size) {
        PageRequest request = PageRequest.of(page, size);
        return foodItemService.findAll(request);
    }

    @GetMapping("/foodItem/{foodItemId}")
    public FoodItem showOne(@PathVariable("foodItemId") String foodItemId) {

        FoodItem foodItemInfo = foodItemService.findItem(Long.parseLong(foodItemId));
        return foodItemInfo;
    }

    @PostMapping("/seller/foodItem/new")
    public ResponseEntity create(@Valid @RequestBody FoodItem foodItem,
                                 BindingResult bindingResult) {
        FoodItem foodItemIdExists = foodItemService.findItem(foodItem.getId());
        if (foodItemIdExists != null) {
            bindingResult
                    .rejectValue("foodItemId", "error.foodItem",
                            "There is already a foodItem with the code provided");
        }
        if (bindingResult.hasErrors()) {
            return ResponseEntity.badRequest().body(bindingResult);
        }
        return ResponseEntity.ok(foodItemService.save(foodItem));
    }

    @PutMapping("/seller/foodItem/{id}/edit")
    public ResponseEntity edit(@PathVariable("id") String foodItemId,
                               @Valid @RequestBody FoodItem foodItem,
                               BindingResult bindingResult) {
        if (bindingResult.hasErrors()) {
            return ResponseEntity.badRequest().body(bindingResult);
        }
        if (!foodItemId.equals(foodItem.getId())) {
            return ResponseEntity.badRequest().body("Id Not Matched");
        }

        return ResponseEntity.ok(foodItemService.update(foodItem));
    }

    @DeleteMapping("/seller/foodItem/{id}/delete")
    public ResponseEntity delete(@PathVariable("id") String foodItemId) {
        foodItemService.delete(foodItemId);
        return ResponseEntity.ok().build();
    }

}