package com.nl.fos.controllers;

import java.security.Principal;
import java.util.Arrays;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.nl.fos.model.Customer;
import com.nl.fos.model.OStatus;
import com.nl.fos.model.Restaurant;
import com.nl.fos.model.Order;
import com.nl.fos.model.OrderItem;
import com.nl.fos.model.OrderStatus;
import com.nl.fos.model.User;
import com.nl.fos.repository.OrderItemRepository;
import com.nl.fos.repository.OrderStatusRepository;
import com.nl.fos.service.OrderService;
import com.nl.fos.service.UserService;
import com.nl.fos.vo.request.OrderItemsRequest;

@RestController
@CrossOrigin
@RequestMapping("/")
public class OrderController {
	
    @Autowired
    UserService userService;
    
    @Autowired
    OrderService orderService;
    
    @Autowired
    OrderStatusRepository orderStatusRepository;
    
	
    @PostMapping("/cart")
    public ResponseEntity<String> checkout(@RequestBody OrderItem[] items, Principal principal) {
    	try {
    	Customer customer = userService.findCustomer(principal.getName());
    	Restaurant restaurant= userService.findRestaurant(items[0].getFoodItem().getRestaurant().getUsername());
    	
    	Order order=new Order();
    	
    	order.setCustomer(customer);
    	order.setRestaurant(restaurant);
    	//order.setOrderItems(Arrays.asList(items));
    	double finalPrice=0;
    	
    	for(OrderItem i: items) {
    		i.setPrice(i.getQuantity()*i.getFoodItem().getPrice());
    		finalPrice+=i.getPrice();
    		i.getFoodItem().setRestaurant(restaurant);
    		i.setOrder(order);
    	}
    	order.setOrderItems(Arrays.asList(items));
    	order.setFinalPrice(finalPrice);
    	order.setRestaurant(items[0].getFoodItem().getRestaurant());
    	OrderStatus orderStatus=orderStatusRepository.findByStatus(OStatus.NEW).get();
    	order.setOrderStatus(orderStatus);
    	Order old=order=orderService.save(order);

    	
        return ResponseEntity.ok(principal.getName());}
    	catch (Exception e) {
            return ResponseEntity.badRequest().build();
		}
    }

}
